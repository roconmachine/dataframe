openapi: 3.0.0
info:
  title: Fine-Grained Authorization Service
  description: A microservice for managing fine-grained access control to resources.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local Development Server

paths:
  /authz/check:
    post:
      summary: Check if a user is authorized to perform an action on a resource
      description: Validate if a user is allowed to perform a specific action on a given resource.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthzRequest'
      responses:
        '200':
          description: Authorization decision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthzResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /resources:
    get:
      summary: Get a list of all resources
      responses:
        '200':
          description: A list of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      summary: Create a new resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created successfully
        '400':
          description: Bad request

  /resources/{id}:
    get:
      summary: Get details of a specific resource by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Resource not found
    put:
      summary: Update an existing resource
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
        '404':
          description: Resource not found
    delete:
      summary: Delete a resource by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Resource deleted successfully
        '404':
          description: Resource not found

  /policies:
    get:
      summary: Get a list of all policies
      responses:
        '200':
          description: A list of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
    post:
      summary: Create a new policy
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        '201':
          description: Policy created successfully
        '400':
          description: Bad request

  /policies/{id}:
    get:
      summary: Get details of a specific policy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Policy details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404':
          description: Policy not found
    put:
      summary: Update an existing policy
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      responses:
        '200':
          description: Policy updated successfully
        '404':
          description: Policy not found
    delete:
      summary: Delete a policy by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Policy deleted successfully
        '404':
          description: Policy not found
  /policy-mappings:
    get:
      summary: "Search  policy mapping with query parameters"
      parameters:
        - in: query
          name: policy_id
          schema:
            type: integer
            format: int64
        - in: query
          name: subject_id
          schema:
            type: integer
            format: int64
        - in: query
          name: resource_id
          schema:
            type: integer
            format: int64
        - in: query
          name: subject_type
          schema:
            type: string
        - in: query
          name: action
          schema:
            type: string
        - in: query
          name: record_status
          schema:
            type: string
      responses:
        '200':
          description: "A list of policy mappings"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PolicyMapping"

    post:
      summary: "Create a new policy mapping"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyMapping"
      responses:
        '201':
          description: "Policy mapping created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyMapping"

  /policy-mappings/{id}:
    get:
      summary: "Get a specific policy mapping by ID"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the policy mapping"
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Details of the specified policy mapping"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyMapping"
        '404':
          description: "Policy mapping not found"

    put:
      summary: "Update a policy mapping"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the policy mapping to update"
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PolicyMapping"
      responses:
        '200':
          description: "Policy mapping updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PolicyMapping"
        '404':
          description: "Policy mapping not found"

    delete:
      summary: "Delete a policy mapping"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID of the policy mapping to delete"
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: "Policy mapping deleted successfully"
        '404':
          description: "Policy mapping not found"
components:
  schemas:
    AuthzRequest:
      type: object
      required:
        - userId
        - action
      properties:
        userId:
          type: string
          description: The ID of the user (provided by the OAuth2 provider)
        resourceId:
          type: integer
          format: int64
          description: The ID of the resource
        action:
          type: string
          enum: ["READ", "WRITE", "DELETE", "EXECUTE", "SHARE"]
          description: The action being performed (e.g., "read", "write", "delete")
        context:
          type: object
          description: Optional context for making the authorization decision (e.g., time, location)

    AuthzResponse:
      type: object
      properties:
        decision:
          type: string
          description: Authorization decision ("allow" or "deny")
        reason:
          type: string
          description: The reason for the decision



    Resource:
      type: object
      description: "it stores resources identifation and meta data"
      additionalProperties  : false
      required:
        - type
        - name
        - source
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum: ["FILE", "DATABASE", "API", "SERVICE", "CUSTOM"]
        source:
          type: string
        owner:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
    Policy:
      type: object
      description: "store conditions to access or deny"
      required:
        - name
        - conditions
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"

    
    Condition:
      type: object
      required:
        - target
        - operator
        - properties
        - effect
      properties:
        id:
          type: integer
          format: int64
        target:
          type: string
          enum: ["TIME", "USER_ATTRIBUTE", "RESOURCE_ATTRIBUTE", "ENVIRONMENT", "CUSTOM"]
          description: "Type of condition (e.g., 'TIME', 'USER_ATTRIBUTE', 'RESOURCE_ATTRIBUTE', 'ENVIRONMENT')"
        operator:
          type: string
          enum: ["EQUALS", "NOT_EQUALS", "GREATER_THAN", "LESS_THAN", "IN", "NOT_IN", "BETWEEN", "CONTAINS"]
          description: "Operator to apply for comparison"
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Properties'
        effect:
          type: string
          enum : ["ALLOW", "DENY"]
    PolicyMapping:
      type: object
      description: "mapping policy or resource with subject like user, group or role"
      required:
        - subject_id
        - action
      properties:
        id:
          type: integer
          format: int64
        policy_id:
          type: integer
          format: int64
        subject_id:
          type: integer
          format: int64
        subject_type:
          type: string
          enum: ["USER", "GROUP", "ROLE"]
        resource_id:
          type: integer
          format: int64
        action:
          type: string
          enum: ["READ", "WRITE", "DELETE", "EXECUTE", "SHARE"]

    Properties:
      type: object
      required:
        - uuid
        - key
      properties:
        id:
          type: integer
          format: int64
        uuid:
          type: string
        key:
          type: string
        value_string:
          type: string
        value_number:
          type: number
          format: int64
        value_boolean :
          type: boolean







